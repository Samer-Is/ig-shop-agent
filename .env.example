# IG-Shop-Agent Environment Configuration
# Copy this file to .env and fill in your actual values

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
# PostgreSQL connection string
DATABASE_URL=postgresql://username:password@localhost:5432/igshop_db

# Alternative: Individual database components (if DATABASE_URL not set)
DB_HOST=localhost
DB_PORT=5432
DB_NAME=igshop_db
DB_USER=postgres
DB_PASSWORD=your_password

# =============================================================================
# OPENAI CONFIGURATION
# =============================================================================
OPENAI_API_KEY=sk-your-openai-api-key-here
OPENAI_MODEL=gpt-4o
OPENAI_EMBEDDING_MODEL=text-embedding-3-small
OPENAI_MAX_TOKENS=1000
OPENAI_TEMPERATURE=0.7

# =============================================================================
# META/INSTAGRAM CONFIGURATION
# =============================================================================
# Get these from Meta Developer Console: https://developers.facebook.com/
META_APP_ID=your_facebook_app_id
META_APP_SECRET=your_facebook_app_secret
META_WEBHOOK_VERIFY_TOKEN=your_webhook_verify_token
META_GRAPH_API_VERSION=v18.0
META_OAUTH_REDIRECT_URI=http://localhost:3000/auth/callback

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================
# Generate a strong secret key for JWT tokens
JWT_SECRET_KEY=your-super-secret-jwt-key-here-change-this-in-production
JWT_ALGORITHM=HS256
JWT_EXPIRATION_HOURS=24

# =============================================================================
# AZURE CONFIGURATION (Optional)
# =============================================================================
AZURE_STORAGE_CONNECTION_STRING=your_azure_storage_connection_string
AZURE_KEY_VAULT_URL=https://your-keyvault.vault.azure.net/

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================
APP_NAME=IG-Shop-Agent
ENVIRONMENT=development
DEBUG=true

# =============================================================================
# LICENSING CONFIGURATION
# =============================================================================
LICENSE_PUBLIC_KEY_PATH=./keys/license_public.pem
LICENSE_PRIVATE_KEY_PATH=./keys/license_private.pem

# =============================================================================
# PERFORMANCE CONFIGURATION
# =============================================================================
MAX_CONVERSATION_HISTORY=20
AI_RESPONSE_TIMEOUT_SECONDS=30

# =============================================================================
# RATE LIMITING CONFIGURATION
# =============================================================================
API_RATE_LIMIT_PER_MINUTE=60
INSTAGRAM_API_RATE_LIMIT_PER_HOUR=200

# =============================================================================
# DEVELOPMENT SETUP NOTES
# =============================================================================
# 1. Install PostgreSQL and create database:
#    createdb igshop_db
#
# 2. Install pgvector extension:
#    psql -d igshop_db -c "CREATE EXTENSION vector;"
#
# 3. Get OpenAI API key from: https://platform.openai.com/api-keys
#
# 4. Create Meta Developer App:
#    - Go to https://developers.facebook.com/
#    - Create new app
#    - Add Instagram Basic Display product
#    - Get App ID and App Secret
#
# 5. Generate JWT secret:
#    python -c "import secrets; print(secrets.token_urlsafe(32))"
#
# 6. Test database connection:
#    python test_database.py

# =============================================================================
# PRODUCTION DEPLOYMENT NOTES
# =============================================================================
# For production deployment:
# 1. Set ENVIRONMENT=production
# 2. Set DEBUG=false
# 3. Use Azure Key Vault for secrets
# 4. Use strong passwords and keys
# 5. Set proper CORS origins
# 6. Configure proper database with backups 