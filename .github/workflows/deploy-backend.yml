name: Deploy Backend Application

on:
  push:
    branches:
      - main
      - production-deployment
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend.yml'
      - '!backend/README.md'
      - '!backend/**/*.md'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

jobs:
  deploy-backend:
    # Prevent duplicate runs
    if: |
      (github.event_name == 'push' && !contains(github.event.head_commit.message, '[skip ci]')) ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Set environment variables
      run: |
        ENV="${{ github.event.inputs.environment || 'dev' }}"
        echo "ENVIRONMENT=$ENV" >> $GITHUB_ENV
        
        # Use the correct web app name with unique string
        if [ "$ENV" = "dev" ]; then
          echo "APP_NAME=igshop-dev-yjhtoi-api" >> $GITHUB_ENV
          echo "RESOURCE_GROUP=igshop-dev-rg-v2" >> $GITHUB_ENV
          echo "KEYVAULT_NAME=igshop-dev-yjhtoi-kv" >> $GITHUB_ENV
        elif [ "$ENV" = "staging" ]; then
          echo "APP_NAME=igshop-staging-api" >> $GITHUB_ENV
          echo "RESOURCE_GROUP=igshop-staging-rg" >> $GITHUB_ENV
          echo "KEYVAULT_NAME=igshop-staging-kv" >> $GITHUB_ENV
        else
          echo "APP_NAME=igshop-prod-api" >> $GITHUB_ENV
          echo "RESOURCE_GROUP=igshop-prod-rg" >> $GITHUB_ENV
          echo "KEYVAULT_NAME=igshop-prod-kv" >> $GITHUB_ENV
        fi
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        
    - name: Test FastAPI application
      run: |
        python -c "
        import os
        import sys
        # Set minimal environment variables for import test
        os.environ['META_APP_ID'] = 'test'
        os.environ['META_APP_SECRET'] = 'test'
        os.environ['OPENAI_API_KEY'] = 'test'
        os.environ['DATABASE_URL'] = 'postgresql://test:test@localhost/test'
        try:
            from app import app
            print('‚úÖ FastAPI app imports successfully')
            print(f'‚úÖ App title: {app.title}')
            print(f'‚úÖ Routes: {len(app.routes)} routes configured')
        except Exception as e:
            print(f'‚ùå Import failed: {e}')
            sys.exit(1)
        "
    
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Configure Web App settings
      run: |
        echo "üîß Configuring Azure Web App: ${{ env.APP_NAME }}"
        
        # Set runtime and startup command for the root app.py
        az webapp config set \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.APP_NAME }} \
          --linux-fx-version "PYTHON|3.12" \
          --startup-file "uvicorn app:app --host 0.0.0.0 --port 8000"
        
        # Configure app settings with Key Vault references
        az webapp config appsettings set \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.APP_NAME }} \
          --settings \
            META_APP_ID="@Microsoft.KeyVault(VaultName=${{ env.KEYVAULT_NAME }};SecretName=meta-app-id)" \
            META_APP_SECRET="@Microsoft.KeyVault(VaultName=${{ env.KEYVAULT_NAME }};SecretName=meta-app-secret)" \
            OPENAI_API_KEY="@Microsoft.KeyVault(VaultName=${{ env.KEYVAULT_NAME }};SecretName=openai-api-key)" \
            DATABASE_PASSWORD="@Microsoft.KeyVault(VaultName=${{ env.KEYVAULT_NAME }};SecretName=database-password)" \
            DATABASE_URL="postgresql://postgres:@Microsoft.KeyVault(VaultName=${{ env.KEYVAULT_NAME }};SecretName=database-password)@igshop-postgres.postgres.database.azure.com:5432/igshop_db?sslmode=require" \
            JWT_SECRET_KEY="production-jwt-secret-${{ env.ENVIRONMENT }}-2024" \
            FRONTEND_URL="https://red-island-0b863450f.2.azurestaticapps.net" \
            KEY_VAULT_URL="https://${{ env.KEYVAULT_NAME }}.vault.azure.net/" \
            ENVIRONMENT="${{ env.ENVIRONMENT }}" \
            SCM_DO_BUILD_DURING_DEPLOYMENT="true" \
            ENABLE_ORYX_BUILD="true" \
            PORT="8000"
        
        echo "‚úÖ Web App configuration completed"
        
    - name: Prepare deployment package
      run: |
        # Deploy the entire repo root so app.py can import from backend/
        # Clean up development artifacts
        rm -rf __pycache__ .pytest_cache *.pyc
        find . -type d -name __pycache__ -exec rm -rf {} + 2>/dev/null || true
        
        # Ensure root requirements.txt exists for app.py
        if [ ! -f requirements.txt ]; then
          echo "Creating root requirements.txt..."
          cat > requirements.txt << EOF
        fastapi>=0.104.0
        uvicorn[standard]>=0.24.0
        pydantic>=2.0.0
        python-multipart
        sqlalchemy
        psycopg2-binary
        python-jose[cryptography]
        passlib[bcrypt]
        python-dotenv
        openai
        azure-identity
        azure-keyvault-secrets
        EOF
        fi
        
        echo "‚úÖ Files to deploy:"
        ls -la
        
    - name: Check Web App Status
      run: |
        echo "üîç Checking Web App status: ${{ env.APP_NAME }}"
        
        # Check if web app exists and is running
        az webapp show \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.APP_NAME }} \
          --query "{name:name,state:state,hostNames:hostNames,kind:kind,repositorySiteName:repositorySiteName}" \
          --output table
        
        # Check app service plan
        az appservice plan show \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name igshop-api-plan \
          --query "{name:name,status:status,sku:sku,numberOfWorkers:numberOfWorkers}" \
          --output table
        
        # Check app service plan usage
        echo "üìä App Service Plan Resource Usage:"
        az appservice plan show \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name igshop-api-plan \
          --query "{name:name,status:status,sku:sku,capacity:sku.capacity,tier:sku.tier}" \
          --output json
        
        # Check if SCM site is accessible
        echo "üîç Checking SCM site accessibility..."
        SCM_URL="https://${{ env.APP_NAME }}.scm.azurewebsites.net"
        if curl -I -s -f "$SCM_URL" --max-time 30; then
          echo "‚úÖ SCM site is accessible"
        else
          echo "‚ùå SCM site is not accessible - this explains the 503 error"
        fi
    
    - name: Aggressive Service Recovery
      run: |
        echo "üö® Implementing aggressive service recovery for: ${{ env.APP_NAME }}"
        
        # First, try to restart the App Service Plan itself
        echo "üîÑ Restarting App Service Plan..."
        az appservice plan update \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name igshop-api-plan \
          --sku B1 \
          --number-of-workers 1
        
        # Stop the web app completely
        echo "üõë Stopping Web App completely..."
        az webapp stop \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.APP_NAME }}
        
        # Wait for complete stop
        sleep 30
        
        # Reset web app configuration to defaults
        echo "üîß Resetting Web App configuration..."
        az webapp config set \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.APP_NAME }} \
          --linux-fx-version "PYTHON|3.12" \
          --startup-file "uvicorn app:app --host 0.0.0.0 --port 8000" \
          --always-on false
        
        # Clear any stuck deployment slots
        echo "üßπ Clearing deployment slots..."
        az webapp deployment slot list \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.APP_NAME }} \
          --output table || echo "No slots to clear"
        
        # Start the web app with fresh configuration
        echo "‚ñ∂Ô∏è Starting Web App with fresh configuration..."
        az webapp start \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.APP_NAME }}
        
        echo "‚úÖ Web App start command completed"
        
        # Wait longer for service to be completely ready
        echo "‚è≥ Waiting for service to be completely ready..."
        sleep 60
        
        # Verify the app is running
        echo "üîç Verifying Web App is running..."
        az webapp show \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.APP_NAME }} \
          --query "{name:name,state:state,hostNames:hostNames}" \
          --output table
        
        # Test SCM site accessibility after restart
        echo "üîç Testing SCM site accessibility after restart..."
        SCM_URL="https://${{ env.APP_NAME }}.scm.azurewebsites.net"
        for i in {1..5}; do
          echo "Attempt $i/5: Testing SCM site..."
          if curl -I -s -f "$SCM_URL" --max-time 30; then
            echo "‚úÖ SCM site is now accessible"
            break
          else
            echo "‚ùå SCM site still not accessible, waiting 30s..."
            sleep 30
          fi
        done
    
    - name: Deploy to Azure Web App
      run: |
        echo "üöÄ Deploying to Azure Web App: ${{ env.APP_NAME }}"
        
        # Create deployment package (exclude large files)
        zip -r deployment.zip . \
          -x "*.git*" "*.github*" "*__pycache__*" "*.pyc" "*.pytest_cache*" \
          -x "ig-shop-agent-dashboard/node_modules/*" \
          -x "ig-shop-agent-dashboard/dist/*" \
          -x "logs/*" "*.log" "*.zip"
        
        echo "üì¶ Deployment package size:"
        ls -lh deployment.zip
        
        # Try the new deploy command first
        echo "üîÑ Attempting deployment with az webapp deploy..."
        if az webapp deploy \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.APP_NAME }} \
          --src-path deployment.zip \
          --type zip \
          --timeout 600; then
          echo "‚úÖ Deployment successful with az webapp deploy"
        else
          echo "‚ö†Ô∏è az webapp deploy failed, trying legacy method..."
          # Fallback to legacy method
          if az webapp deployment source config-zip \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.APP_NAME }} \
            --src deployment.zip \
            --timeout 600; then
            echo "‚úÖ Deployment completed with legacy method"
          else
            echo "‚ùå Both deployment methods failed. Trying manual file upload..."
            
            # Last resort: try to upload just the essential files
            echo "üîÑ Attempting manual file deployment..."
            
            # Create a minimal deployment with just the essential files
            mkdir -p minimal_deploy
            cp app.py minimal_deploy/
            cp requirements.txt minimal_deploy/
            cp -r backend minimal_deploy/
            
            # Create minimal zip
            cd minimal_deploy
            zip -r ../minimal_deployment.zip .
            cd ..
            
            echo "üì¶ Minimal deployment package size:"
            ls -lh minimal_deployment.zip
            
            # Try with minimal package
            if az webapp deployment source config-zip \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --name ${{ env.APP_NAME }} \
              --src minimal_deployment.zip \
              --timeout 600; then
              echo "‚úÖ Minimal deployment completed"
            else
              echo "‚ùå All deployment methods failed. SCM service appears to be completely down."
              echo "üîç Final diagnostics..."
              
              # Show detailed app status
              az webapp show \
                --resource-group ${{ env.RESOURCE_GROUP }} \
                --name ${{ env.APP_NAME }} \
                --output json | jq '{name, state, hostNames, kind, repositorySiteName, availabilityState}'
              
              # Check if we can at least reach the main site
              MAIN_URL="https://${{ env.APP_NAME }}.azurewebsites.net"
              echo "üîç Testing main site accessibility..."
              if curl -I -s -f "$MAIN_URL" --max-time 30; then
                echo "‚úÖ Main site is accessible - SCM service specific issue"
              else
                echo "‚ùå Main site also not accessible - complete service failure"
              fi
              
              # Try to get deployment logs
              echo "üîç Checking recent deployment logs..."
              az webapp log deployment list \
                --resource-group ${{ env.RESOURCE_GROUP }} \
                --name ${{ env.APP_NAME }} \
                --output table || echo "Could not retrieve deployment logs"
              
              echo "üí° Recommendation: The Azure Web App SCM service appears to be experiencing issues."
              echo "üí° This may require manual intervention in the Azure Portal or Azure Support."
              echo "üí° Check: https://status.azure.com for any known service issues."
              echo ""
              echo "üö® ATTEMPTING NUCLEAR OPTION: Recreating the Web App..."
              echo "‚ö†Ô∏è This will temporarily take the service offline but should restore functionality."
              
              # Backup current app configuration
              echo "üìã Backing up current app configuration..."
              APP_BACKUP=$(az webapp show --name ${{ env.APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --output json 2>/dev/null || echo "{}")
              
              # Backup app settings
              echo "üìã Backing up app settings..."
              SETTINGS_BACKUP=$(az webapp config appsettings list --name ${{ env.APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --output json 2>/dev/null || echo "[]")
              
              # Delete the corrupted Web App
              echo "üóëÔ∏è Deleting corrupted Web App..."
              az webapp delete --name ${{ env.APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }}
              
              # Wait for deletion to complete
              echo "‚è≥ Waiting for deletion to complete..."
              sleep 30
              
              # Recreate the Web App
              echo "üîÑ Recreating Web App..."
              az webapp create \
                --name ${{ env.APP_NAME }} \
                --resource-group ${{ env.RESOURCE_GROUP }} \
                --plan igshop-api-plan \
                --runtime "PYTHON|3.12" \
                --os-type Linux
              
              # Wait for creation to complete
              echo "‚è≥ Waiting for Web App to be ready..."
              sleep 60
              
              # Configure the recreated Web App with proper settings
              echo "üîß Configuring recreated Web App..."
              az webapp config set \
                --resource-group ${{ env.RESOURCE_GROUP }} \
                --name ${{ env.APP_NAME }} \
                --linux-fx-version "PYTHON|3.12" \
                --startup-file "uvicorn app:app --host 0.0.0.0 --port 8000"
              
              # Restore app settings if backup exists
              if [ "$SETTINGS_BACKUP" != "[]" ]; then
                echo "üîÑ Restoring app settings..."
                echo "$SETTINGS_BACKUP" | jq -r '.[] | "--settings \(.name)=\(.value)"' | xargs az webapp config appsettings set --name ${{ env.APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }}
              else
                echo "üîß Setting default app settings..."
                az webapp config appsettings set \
                  --resource-group ${{ env.RESOURCE_GROUP }} \
                  --name ${{ env.APP_NAME }} \
                  --settings \
                    META_APP_ID="@Microsoft.KeyVault(VaultName=${{ env.KEYVAULT_NAME }};SecretName=meta-app-id)" \
                    META_APP_SECRET="@Microsoft.KeyVault(VaultName=${{ env.KEYVAULT_NAME }};SecretName=meta-app-secret)" \
                    OPENAI_API_KEY="@Microsoft.KeyVault(VaultName=${{ env.KEYVAULT_NAME }};SecretName=openai-api-key)" \
                    DATABASE_PASSWORD="@Microsoft.KeyVault(VaultName=${{ env.KEYVAULT_NAME }};SecretName=database-password)" \
                    DATABASE_URL="postgresql://postgres:@Microsoft.KeyVault(VaultName=${{ env.KEYVAULT_NAME }};SecretName=database-password)@igshop-postgres.postgres.database.azure.com:5432/igshop_db?sslmode=require" \
                    JWT_SECRET_KEY="production-jwt-secret-${{ env.ENVIRONMENT }}-2024" \
                    FRONTEND_URL="https://red-island-0b863450f.2.azurestaticapps.net" \
                    KEY_VAULT_URL="https://${{ env.KEYVAULT_NAME }}.vault.azure.net/" \
                    ENVIRONMENT="${{ env.ENVIRONMENT }}" \
                    SCM_DO_BUILD_DURING_DEPLOYMENT="true" \
                    ENABLE_ORYX_BUILD="true" \
                    PORT="8000"
              fi
              
              # Wait for configuration to apply
              echo "‚è≥ Waiting for configuration to apply..."
              sleep 30
              
              # Deploy to the new Web App
              echo "üöÄ Deploying to recreated Web App..."
              if az webapp deploy \
                --resource-group ${{ env.RESOURCE_GROUP }} \
                --name ${{ env.APP_NAME }} \
                --src-path deployment.zip \
                --type zip \
                --timeout 600; then
                echo "‚úÖ Nuclear option completed successfully. Web App has been recreated and deployed."
                
                # Verify the deployment
                echo "üîç Verifying deployment on recreated Web App..."
                sleep 30
                APP_URL="https://${{ env.APP_NAME }}.azurewebsites.net"
                if curl -f -s "$APP_URL/health" --max-time 30; then
                  echo "‚úÖ Deployment verification successful - health endpoint is responding"
                else
                  echo "‚ö†Ô∏è Deployment verification failed - health endpoint not responding yet"
                fi
              else
                echo "‚ùå Nuclear option failed - deployment to recreated Web App failed"
                echo "üö® This indicates a deeper Azure service issue that requires manual intervention"
                exit 1
              fi
            fi
          fi
        fi

    - name: Post-deployment verification
      run: |
        # Wait for deployment to complete
        echo "‚è≥ Waiting 60 seconds for deployment to complete..."
        sleep 60
        
        # Restart to apply all settings
        echo "üîÑ Restarting Web App..."
        az webapp restart \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.APP_NAME }}
        
        # Wait for restart
        echo "‚è≥ Waiting 30 seconds for restart..."
        sleep 30

        # Test deployment
        APP_URL="https://${{ env.APP_NAME }}.azurewebsites.net"
        echo "üîç Testing deployment at: $APP_URL"
        
        # Test health endpoint with retries
        echo "Testing health endpoint..."
        for i in {1..5}; do
          if curl -f -s "$APP_URL/health"; then
            echo "‚úÖ Health endpoint test passed"
            break
          else
            echo "‚ö†Ô∏è Health endpoint test failed (attempt $i/5)"
            sleep 10
          fi
        done
        
        # Test root endpoint
        echo "Testing root endpoint..."
        if curl -f -s "$APP_URL/"; then
          echo "‚úÖ Root endpoint test passed"
        else
          echo "‚ö†Ô∏è Root endpoint test failed"
        fi
        
        echo "‚úÖ Backend deployment completed!"
        echo "üîó Backend URL: $APP_URL"
        echo "üîó Health Check: $APP_URL/health" 