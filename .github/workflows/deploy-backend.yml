name: Deploy Backend Application

on:
  push:
    branches:
      - main
      - production-deployment
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend.yml'
      - '!backend/README.md'
      - '!backend/**/*.md'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

jobs:
  deploy-backend:
    # Prevent duplicate runs
    if: |
      (github.event_name == 'push' && !contains(github.event.head_commit.message, '[skip ci]')) ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Set environment variables
      run: |
        ENV="${{ github.event.inputs.environment || 'dev' }}"
        echo "ENVIRONMENT=$ENV" >> $GITHUB_ENV
        
        # Use the correct web app name (igshop-api, not the function app)
        if [ "$ENV" = "dev" ]; then
          echo "APP_NAME=igshop-api" >> $GITHUB_ENV
          echo "RESOURCE_GROUP=igshop-dev-rg-v2" >> $GITHUB_ENV
          echo "KEYVAULT_NAME=igshop-dev-yjhtoi-kv" >> $GITHUB_ENV
        elif [ "$ENV" = "staging" ]; then
          echo "APP_NAME=igshop-staging-api" >> $GITHUB_ENV
          echo "RESOURCE_GROUP=igshop-staging-rg" >> $GITHUB_ENV
          echo "KEYVAULT_NAME=igshop-staging-kv" >> $GITHUB_ENV
        else
          echo "APP_NAME=igshop-prod-api" >> $GITHUB_ENV
          echo "RESOURCE_GROUP=igshop-prod-rg" >> $GITHUB_ENV
          echo "KEYVAULT_NAME=igshop-prod-kv" >> $GITHUB_ENV
        fi
        
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Test FastAPI application
      run: |
        cd backend
        python -c "
        import os
        import sys
        # Set minimal environment variables for import test
        os.environ['META_APP_ID'] = 'test'
        os.environ['META_APP_SECRET'] = 'test'
        os.environ['OPENAI_API_KEY'] = 'test'
        os.environ['DATABASE_URL'] = 'postgresql://test:test@localhost/test'
        try:
            from production_app import app
            print('‚úÖ FastAPI app imports successfully')
            print(f'‚úÖ App title: {app.title}')
            print(f'‚úÖ Routes: {len(app.routes)} routes configured')
        except Exception as e:
            print(f'‚ùå Import failed: {e}')
            sys.exit(1)
        "
    
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Configure Web App settings
      run: |
        echo "üîß Configuring Azure Web App: ${{ env.APP_NAME }}"
        
        # Set runtime and startup command for the root app.py
        az webapp config set \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.APP_NAME }} \
          --linux-fx-version "PYTHON|3.12" \
          --startup-file "uvicorn app:app --host 0.0.0.0 --port 8000"
        
        # Configure app settings with Key Vault references
        az webapp config appsettings set \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.APP_NAME }} \
          --settings \
            META_APP_ID="@Microsoft.KeyVault(VaultName=${{ env.KEYVAULT_NAME }};SecretName=meta-app-id)" \
            META_APP_SECRET="@Microsoft.KeyVault(VaultName=${{ env.KEYVAULT_NAME }};SecretName=meta-app-secret)" \
            OPENAI_API_KEY="@Microsoft.KeyVault(VaultName=${{ env.KEYVAULT_NAME }};SecretName=openai-api-key)" \
            DATABASE_PASSWORD="@Microsoft.KeyVault(VaultName=${{ env.KEYVAULT_NAME }};SecretName=database-password)" \
            DATABASE_URL="postgresql://postgres:@Microsoft.KeyVault(VaultName=${{ env.KEYVAULT_NAME }};SecretName=database-password)@igshop-postgres.postgres.database.azure.com:5432/igshop_db?sslmode=require" \
            JWT_SECRET_KEY="production-jwt-secret-${{ env.ENVIRONMENT }}-2024" \
            FRONTEND_URL="https://igshop-dev-yjhtoi-swa.azurestaticapps.net" \
            KEY_VAULT_URL="https://${{ env.KEYVAULT_NAME }}.vault.azure.net/" \
            ENVIRONMENT="${{ env.ENVIRONMENT }}" \
            SCM_DO_BUILD_DURING_DEPLOYMENT="true" \
            ENABLE_ORYX_BUILD="true" \
            PORT="8000"
        
        echo "‚úÖ Web App configuration completed"
        
    - name: Prepare deployment package
      run: |
        # Deploy the entire repo root so app.py can import from backend/
        # Clean up development artifacts
        rm -rf __pycache__ .pytest_cache *.pyc
        find . -type d -name __pycache__ -exec rm -rf {} + 2>/dev/null || true
        
        # Ensure root requirements.txt exists for app.py
        if [ ! -f requirements.txt ]; then
          echo "Creating root requirements.txt..."
          cat > requirements.txt << EOF
        fastapi>=0.104.0
        uvicorn[standard]>=0.24.0
        pydantic>=2.0.0
        python-multipart
        sqlalchemy
        psycopg2-binary
        python-jose[cryptography]
        passlib[bcrypt]
        python-dotenv
        openai
        azure-identity
        azure-keyvault-secrets
        EOF
        fi
        
        echo "‚úÖ Files to deploy:"
        ls -la
        
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.APP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: '.'

    - name: Post-deployment verification
      run: |
        # Wait for deployment to complete
        echo "‚è≥ Waiting 60 seconds for deployment to complete..."
        sleep 60
        
        # Restart to apply all settings
        echo "üîÑ Restarting Web App..."
        az webapp restart \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.APP_NAME }}
        
        # Wait for restart
        echo "‚è≥ Waiting 30 seconds for restart..."
        sleep 30

        # Test deployment
        APP_URL="https://${{ env.APP_NAME }}.azurewebsites.net"
        echo "üîç Testing deployment at: $APP_URL"
        
        # Test health endpoint with retries
        echo "Testing health endpoint..."
        for i in {1..5}; do
          if curl -f -s "$APP_URL/health"; then
            echo "‚úÖ Health endpoint test passed"
            break
          else
            echo "‚ö†Ô∏è Health endpoint test failed (attempt $i/5)"
            sleep 10
          fi
        done
        
        # Test root endpoint
        echo "Testing root endpoint..."
        if curl -f -s "$APP_URL/"; then
          echo "‚úÖ Root endpoint test passed"
        else
          echo "‚ö†Ô∏è Root endpoint test failed"
        fi
        
        echo "‚úÖ Backend deployment completed!"
        echo "üîó Backend URL: $APP_URL"
        echo "üîó Health Check: $APP_URL/health" 