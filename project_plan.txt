IG-Shop-Agent (Azure SaaS Edition)

1 Mission Statement
Provide Instagram merchants a fully hosted AI agent that:

answers DMs in cool Jordanian-Arabic,

knows their catalog, creates orders, handles returns,

remembers the last 20 turns of every conversation,

pipelines future delivery-API hooks, and

scales across many shops with handle-based licensing.

Admin console lets the product owner manage licences, view usage & costs, and audit conversations.

2 High-Level Features
Category	Details
Onboarding wizard	Meta OAuth → Catalog CSV → KB upload → Business profile YAML → Finish
AI DM agent	GPT-4o, Jordanian tone, function-call schema, last-20 mem, order creation
Catalog manager	Spreadsheet grid, CSV import/export
Knowledge-base	Drag-drop PDFs / docs / URLs → Azure AI Search vector index
Business profile	YAML template (intro, delivery, returns, offers, brand voice, IG handle)
Orders page	Paginated table, CSV export
Admin console	Licences CRUD, tenant health dashboard, conversation viewer, cost tracker
Licensing	whitelist.sig (Ed25519) maps instagram_handle → expiry
Security	Postgres RLS, Key Vault, Managed Identity, GDPR 30-day message purge
CI/CD	GitHub Actions → Bicep infra → SWA deploy → Docker API → Alembic
you will see that theres a comprehnsive dashoboard is ready with mock data, that has multiple tabs, for categories, orders, settings, ai instructions, business rules, product catalog with functionality to add or remove or edit. etc, you need to fully review into
now before that dashobard page, there must be a log in page, where the customer connect to their instagram page, once connected the should be able to access this dashobard where they can edit everything.


3 Tech Stack
Layer	Choice	Notes
SPA UI	React 18 + Vite + Chakra UI	SWA auth, TypeScript
API	FastAPI 1.1	Container on App Service Linux
LLM	Azure OpenAI – deployments: gpt4o, embedding-small	
Vector store	Azure AI Search (vector enabled, Basic)	
DB	Azure Postgres Flex (B1ms)	pgcrypto, row-level security
Queue	Service Bus (Basic)	buffers IG events
Webhook	Azure Functions (Python 3.12)	HTTP trigger + timer trigger
File store	Blob Storage (hot)	
Secrets	Key Vault	
Logs	Application Insights	
IaC	Bicep (infra/main.bicep)	
Licence CLI	Python script re-signing whitelist.sig	

4 Azure Resource List (baseline SKUs)
Resource	SKU
Static Web Apps	Standard
App Service Plan	B1 Linux
Postgres Flex	B1ms
AI Search	Basic
OpenAI	S0
Service Bus	Basic
Blob Storage	Standard LRS (hot)
Key Vault	Standard
App Insights	Basic
Function App	Consumption

5 Project Structure (generated by Cursor)
/repo
  README.md  (set-up guide)
  .github/workflows/ci-cd.yml
  /infra (main.bicep + parameters.json)
  /frontend (React + Chakra UI)
  /backend (FastAPI, Dockerfile, Functions)
   └─ /admin add_to_whitelist.py
  /prompts (system_prompt.md, function_schema.json)
  whitelist.sig (dev placeholder)

6 Postgres Schema (simplified)
sql
Copy
Edit
tenants(id PK, instagram_handle text unique, display_name, plan, created_at)
users(id PK, tenant_id FK, email, role, last_login)
meta_tokens(tenant_id PK, access_token enc, expires_at)
catalog_items(id PK, tenant_id FK, sku, name, price_jod, media_url, extras jsonb)
orders(id PK, tenant_id FK, sku, qty, customer text, phone, status, created_at)
kb_documents(id PK, tenant_id FK, file_uri, title, vector_id)
profiles(tenant_id PK, yaml_profile jsonb)
conversations(id PK, tenant_id FK, sender, text, ts, tokens_in, tokens_out)
usage_stats(id PK, tenant_id FK, date, openai_cost_usd, meta_messages)
RLS enforced on tenant_id; admin role bypasses.

7 Runtime Flow
Meta DM → Function webhook → Service Bus.

Worker in FastAPI pulls msg:
• licence check → instagram_handle in whitelist.sig
• fetch last-20 convo, catalog slice, KB vectors, profile YAML
• call GPT-4o → parse function call
• write conversations, maybe orders
• send reply via Graph API
• log tokens → usage_stats, App Insights.

Nightly timer Function writes token-expiry warnings.

8 CLI Workflow for New Licence
bash
Copy
Edit
python admin/add_to_whitelist.py \
       --handle racingjacketsjo \
       --expiry 2026-06-30 \
       --private-key ~/.keys/igshop_ed25519.pem
# outputs new whitelist.sig
az storage blob upload \
   --account-name igstore... \
   --container licencefiles \
   --file whitelist.sig \
   --name whitelist.sig \
   --overwrite
CI redeploys; merchant can now onboard.

9 Key User Journeys
Merchant onboarding (browser)
Meta Login → auto-detect or help create FB Page link.

Paste ngrok token removed (cloud), now direct SaaS.

Upload catalog.csv.

Upload KB docs/links → embedded.

Fill business profile form (YAML) → Finish.

Starts receiving AI answers.

Admin tasks
Add / extend licences

View tenant tiles (msgs, cost, errors)

Drill into conversation log

Monitor OpenAI spend & token expiry

10 Dev & Ops Checklist
Local dev: Docker Compose file maps Postgres & AI Search emulator.

Secrets: .env.local for dev; Key Vault in prod.

Tests: pytest, Playwright E2E for wizard.

Telemetry: OpenTelemetry Python SDK → App Insights.

Alerts: AI cost, token expiry, webhook error rate.

Docs: Architecture diagram (Mermaid) in README

i want fully build app without errors, with fully adhering to these instructions.

note, review the current directory it has a lot of componets already implemented.

HUGE NOTE AND WARINGIN HERE: DO NOT USE MOCK DATA OR DEMO, EVERYTHIN MUST BE LIVE AND ACTUAL, IF YOU SEE ANYTHING WITH MOCK DATA REPLACE IT WITH ACTUALTHIS OLUTION MUST BE READY TO BE SOLD

QUICK NOTE HERE, YOU MUST BE AWARE OF THE CURRENT CLOUD ARECHTECTURE AS THIS APP WILL BE DEPLOYED IN AZURE AS WEB APP, SO KEEP THAT IN MIND. ALSO I HAVE THE OPEN AI API KEY AND META APP CREDINTIALS:


FACEBOOK_APP_ID=1879578119651644
FACEBOOK_APP_SECRET=f79b3350f43751d6139e1b29a232cbf3
OPENAI_API_KEY=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

MAKE SURE TO LIST THE ARCHETECTURE THAT AZURE HAVE TO KNOW WHAT YOU HAVE THEN PROCEED. I ALREADY HAVE EVERYTHING IN CLOUD, USE AZURE CLI TO SEE WHAT WE HAVE NOW. THE RESOURCE GROUP NAME IS "igshop-dev-rg-v2  DO NOT REINVENT THE WHEEL. 
ALSO WE HAVE GITHUB REPO THAT WE USE AND ACTIONS WORKFLOW AS WELL

ALWAYS CHECK FOR EXISTING FILES, FUNCTIONS BEFORE PROCEEDING WITH ANYTHING